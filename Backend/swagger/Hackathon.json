swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Hackathon Project  
  # APIs related to Loan functionalities 
  contact:
    email: falcon@hackathon.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Loan
  description: Apply loan application, Gets Loan Application Status, Approve Loan, Scedule Loan payment, Gets Usage
- name: Peronal Info
  description: Gets Prsonal Details against Loan Application, User Notification
paths:
  /loanApplications:
    post:
      tags:
      - Loan
      summary: Create Loan Account
      operationId: createLoanAccount
      description: To apply loan
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: LoanDetail
        description: Apply for a Loan
        schema:
          $ref: '#/definitions/LoanDetail'
      responses:
        201:
          description: Loan account created
        400:
          description: invalid input, object invalid
        409:
          description: Loan Account already exists   

  /loanApproval:
    put:
      tags:
      - Loan
      summary: Update Loan Account Status
      operationId: updateLoanStatus
      description: To update Loan Status
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: LoanDetail
        description: Apply for a Loan
        schema:
          $ref: '#/definitions/LoanDetail'
      responses:
        201:
          description: Loan account created
        400:
          description: invalid input, object invalid
        409:
          description: Loan Account already exists    

  /loanApplicationStatus/{appId}:
    get:
      tags:
      - "Loan"
      summary: "Get Loan Application Details with Status"
      description: "Return Loan Application"
      operationId: "getLoanApplicationStatus"
      produces:
      - "application/json"
      parameters:
      - name: "appId"
        in: "path"
        description: "Loan Application Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/LoanDetail'
        400:
          description: "Invalid Loan Application ID supplied"
        404:
          description: "Loan Application Not found"

  /scheduleLoanPayment/{appId}:
    post:
      tags:
      - Payment
      summary: To scheule Loan Payment
      operationId: doScheduleLoanPayment
      description: To schecule Loan Payment
      parameters:
      - in: path
        name: appId
        type: string
        required: true
        description: Loan Application Id
      responses:
        201:
          description: Loan Payment Scheduled
        400:
          description: Invalid Loan Application ID provided
  /notifyUser/{appId}:
    post:
      tags:
      - Notification
      summary: To notify the user associated with the Loan Application ID
      operationId: doNotifyUser
      description: To schecule Loan Payment
      parameters:
      - in: path
        name: appId
        type: string
        required: true
        description: Loan Application Id
      responses:
        201:
          description: User Notified 
        400:
          description: Invalid Loan Application ID provided
          
  /usage:
    get:
      tags:
      - Loan 
      summary: Get a List of Usage
      operationId: getAllUsage
      description: |
       Get all the usage
      produces:
      - application/json
      responses:
        200:
          description: Loan Account Details
          schema:
            type: array
            items:
              $ref: '#/definitions/NameValuePair'
        400:
          description: bad input parameter   
          
  /usageById/{usageId}:
    get:
      tags:
      - Loan 
      summary: Get Usage based on provided usageId
      operationId: getUsage
      description: |
       Get all the usage
      produces:
      - application/json
      parameters:
      - in: path
        name: usageId
        type: string
        required: true      
      responses:
        200:
          description: Usage Id
          schema:
            type: object
            items:
              $ref: '#/definitions/NameValuePair'
        400:
          description: bad input parameter     

  /countries:
    get:
      tags:
      - Loan 
      summary: Get All Countries
      operationId: getCountries
      description: Get all countries
      produces:
      - application/json
      responses:
        200:
          description: Usage Id
          schema:
            type: array
            items:
              $ref: '#/definitions/NameValuePair'
        400:
          description: bad input parameter    
          
  /personalDetails/{appId}:
    get:
      tags:
      - "Loan"
      summary: "Get the personal details against provided Loan App Id"
      description: "Gets the personal details asscoicated with Loan Application Id"
      operationId: getPersonalDetail
      produces:
      - "application/json"
      parameters:
      - name: "appId"
        in: "path"
        description: "Loan Application Id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/PersonalDetail'
        400:
          description: "Invalid Loan Application ID supplied"
        404:
          description: "Loan Application Not found"
          
definitions:
  NameValuePair:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: integer
        example: 123456
      name:
        type: string
        example: 'current assets'
  LoanDetail:
    type: object
    required:
    - id
    - amount
    - term
    - usage
    - personalDetail
    - corporateDetail
    properties:
      id:
        type: integer
        example: 123456
      amount:
        type: number
        example: 100000
      term:
        type: string
        example: '240 Months'  
      personalDetail:
        type: object
        items: 
          $ref: '#/definitions/PersonalDetail' 
      corporateDetail:
        type: object
        items: 
          $ref: '#/definitions/CorporateDetail'     
  PersonalDetail:
    type: object
    required:
    - id
    - name
    - address
    - citizenship
    - birthDate
    - phone
    - email
    properties:
      id:
        type: integer
        example: 222222
      name:
        type: string
        example: ABC
      citizenship:
        type: string
        example: India  
      birthDate:
        type: string
        format: date-time
        example: 2000-10-29              
      phone:
        type: string
        example: '+ 999 999 4444'   
      email:
        type: string
        format: email
        example: 'abcd@gmail.com'
        
  CorporateDetail:
    type: object
    required:
    - id
    - name
    - address
    - legalStructure
    - lastYearRevenue
    properties:
      id:
        type: string
        example: '333333333'
      name:
        type: string
        example: 'Falcon Corp'
      address:
        type: string
        example: 'Electronics City, Bangalore'  
      legalStructure:
        type: string
        example: 'LLP'          
      lastYearRevenue:
        type: number
        example: '1000000'
      comRegister:
        type: string
        example: 'Commercial Register'
